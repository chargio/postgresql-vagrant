---
- hosts: all
  become: true
  tasks:
    - hostname: name=postgresql
    - name: install OS elements
      dnf: name=* state=latest
    - name: install OS packages for development
      dnf: name={{ item }} state=latest
      with_items:
        - dnf-plugins-core
        - libselinux-python
        - python2-psycopg2
        - python-firewall
        - memcached
        - postgresql-devel
        - postgresql-server
        - bash-completion
        - vim
    - name: Initiate database
      command: service postgresql initdb
               creates=/var/lib/pgsql/data/postgresql.conf
    - name: configure pg_hba.conf for local access
      replace: dest=/var/lib/pgsql/data/pg_hba.conf 
                  regexp='^(local\s*\w*\s*\w*\s*)(peer)'
                  replace='\1trust' 
                  backup=yes
    - name: configure pg_hba.conf for network access
      replace: dest=/var/lib/pgsql/data/pg_hba.conf 
               regexp='^(host\s*\w*\s*\w*\s*)(127.0.0.1/32)\s*(ident)'
               replace='\1 0.0.0.0/0        trust'
               backup=yes
    - name: configure postgresql.conf
      lineinfile:  path=/var/lib/pgsql/data/postgresql.conf
                   regexp='^listen_addresses.*'
                   line="listen_addresses = '*'"
                   backup=yes
    - name: Start PostgreSQL and enable at boot
      service: name=postgresql
               enabled=yes
               state=started
    - name: create users in postgres
      vars:
        dbusers:
           - { username: shiftreservation, password: shiftreservation }
           - { username: root, password: smartvm }
           - { username: postgres, password: postgres }
      with_items: "{{ dbusers }}"
      postgresql_user: name={{ item.username }} password={{ item.password }} state=present role_attr_flags=SUPERUSER
    - name: enable memcached and ensure is running
      service: name=memcached state=started enabled=yes
    - name: reload postgresql
      service:
        name: postgresql
        state: restarted
        daemon_reload: yes
- hosts: all
  become: true
  tasks:
    - name: verify if we need to reboot
      command: dnf needs-restarting
      register: reboot_needed
    - name: reboot machine
      shell: shutdown -t 5 -r now "Rebooting as the appliance needs restarting"
      async: 0
      poll: 0
      ignore_errors: yes
      when: reboot_needed.stdout != ""
    - name: waiting for server to come back
      local_action: wait_for host={{ inventory_hostname }}
                    state=started
      become: false
      when: reboot_needed.stdout != ""
...
